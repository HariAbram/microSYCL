    int err;
    int* cpus;
    int gid;
    double result = 0.0;
    char estr[] ="CYCLE_ACTIVITY_STALLS_MEM_ANY:PMC0" ;//"MEM_LOAD_RETIRED_L1_MISS:PMC0,MEM_LOAD_RETIRED_L2_MISS:PMC1,MEM_LOAD_RETIRED_L3_MISS:PMC2";
    char* enames[1] = {"CYCLE_ACTIVITY_STALLS_MEM_ANY:PMC0"};//{"MEM_LOAD_RETIRED_L1_MISS:PMC0","MEM_LOAD_RETIRED_L2_MISS:PMC1","MEM_LOAD_RETIRED_L3_MISS:PMC2"};
    int n = sizeof(enames) / sizeof(enames[0]);
    //perfmon_setVerbosity(3);
    // Load the topology module and print some values.
    err = topology_init();
    if (err < 0)
    {
        printf("Failed to initialize LIKWID's topology module\n");
        return;
    }
    // CpuInfo_t contains global information like name, CPU family, ...
    //CpuInfo_t info = get_cpuInfo();
    // CpuTopology_t contains information about the topology of the CPUs.
    CpuTopology_t topo = get_cpuTopology();
    // Create affinity domains. Commonly only needed when reading Uncore counters
    affinity_init();
    printf("Likwid example on a %s with %d CPUs\n", info->name, topo->numHWThreads);

    cpus = (int*)malloc(topo->numHWThreads * sizeof(int));
    if (!cpus)
        return;

    for (int i=0;i<topo->numHWThreads;i++)
    {
        cpus[i] = topo->threadPool[i].apicId;
    }

    // Must be called before perfmon_init() but only if you want to use another
    // access mode as the pre-configured one. For direct access (0) you have to
    // be root.
    //accessClient_setaccessmode(0);

    // Initialize the perfmon module.
    err = perfmon_init(topo->numHWThreads, cpus);
    if (err < 0)
    {
        printf("Failed to initialize LIKWID's performance monitoring module\n");
        topology_finalize();
        return;
    }

    // Add eventset string to the perfmon module.
    gid = perfmon_addEventSet(estr);
    if (gid < 0)
    {
        printf("Failed to add event string %s to LIKWID's performance monitoring module\n", estr);
        perfmon_finalize();
        topology_finalize();
        return;
    }

    // Setup the eventset identified by group ID (gid).
    err = perfmon_setupCounters(gid);
    
    if (err < 0)
    {
        printf("Failed to setup group %d in LIKWID's performance monitoring module\n", gid);
        perfmon_finalize();
        topology_finalize();
        return;
    }
    
    // Start all counters in the previously set up event set.
    err = perfmon_startCounters();
    if (err < 0)
    {
        printf("Failed to start counters for group %d for thread %d\n",gid, (-1*err)-1);
        perfmon_finalize();
        topology_finalize();
        return;
    }