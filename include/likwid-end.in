    // Read and record current event counts.
    err = perfmon_readCounters();
    if (err < 0)
    {
        printf("Failed to read counters for group %d for thread %d\n",gid, (-1*err)-1);
        perfmon_finalize();
        topology_finalize();
        return;
    }

    // Print the result of every thread/CPU for all events in estr, counting between the 
    // previous two calls of perfmon_readCounters().
    printf("Work task measurements:\n");
    for (int j=0; j<n; j++)
    {
        for (int i = 0;i < topo->numHWThreads; i++)
        {
            result = perfmon_getLastResult(gid, j, i);
            printf("- event set %s at CPU %d: %f\n", enames[j], cpus[i], result);
        }
    }



    // Stop all counters in the currently-active event set.
    err = perfmon_stopCounters();
    if (err < 0)
    {
        printf("Failed to stop counters for group %d for thread %d\n",gid, (-1*err)-1);
        perfmon_finalize();
        topology_finalize();
        return;
    }

    // Print the result of every thread/CPU for all events in estr, counting since counters first started.
    printf("Total sum measurements:\n");
    for (int j=0; j<n; j++)
    {
        for (int i = 0;i < topo->numHWThreads; i++)
        {
            result = perfmon_getResult(gid, j, i);
            printf("- event set %s at CPU %d: %f\n", enames[j], cpus[i], result);
        }
    }


    free(cpus);
    // Uninitialize the perfmon module.
    perfmon_finalize();
    affinity_finalize();
    // Uninitialize the topology module.
    topology_finalize();